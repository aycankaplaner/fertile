% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/checks.R, R/fertile.R, R/utils.R
\name{has_tidy_media}
\alias{has_tidy_media}
\alias{has_tidy_images}
\alias{has_tidy_code}
\alias{has_tidy_raw_data}
\alias{has_tidy_data}
\alias{has_tidy_scripts}
\alias{has_readme}
\alias{has_proj_root}
\alias{has_no_nested_proj_root}
\alias{has_well_commented_code}
\alias{has_only_used_files}
\alias{has_no_absolute_paths}
\alias{has_only_portable_paths}
\alias{has_no_randomness}
\alias{has_no_lint}
\alias{has_clear_build_chain}
\alias{proj_check}
\alias{proj_check_some}
\alias{proj_check_badge}
\alias{list_checks}
\title{Reproducbility checks}
\usage{
has_tidy_media(path = ".")

has_tidy_images(path = ".")

has_tidy_code(path = ".")

has_tidy_raw_data(path = ".")

has_tidy_data(path = ".")

has_tidy_scripts(path = ".")

has_readme(path = ".")

has_proj_root(path = ".")

has_no_nested_proj_root(path = ".")

has_well_commented_code(path = ".")

has_only_used_files(path = ".")

has_no_absolute_paths(path = ".")

has_only_portable_paths(path = ".")

has_no_randomness(path = ".")

has_no_lint(path = ".")

has_clear_build_chain(path = ".")

proj_check(path = ".")

proj_check_some(path, ...)

proj_check_badge(path = ".", badge)

list_checks()
}
\arguments{
\item{path}{Directory you want to check.

Note: For \link{proj_check_some}, which does not take a default path,
if you want to check your current directory, enter \code{"."} as your path.}

\item{...}{One or more unquoted expressions separated by commas,
containing information about the checks you would like to complete.
These should be written as if they are being passed to dplyr's \link[dplyr]{select}.

An example statement might be:

\code{ends_with("root"), contains("tidy"), -has_tidy_scripts}}

\item{badge}{name of badge to run checks for --- "tidy-files", "documentation", "randomness", "structure", "paths", or "style"}
}
\description{
A laundry list of small checks that help make your project
more likely to be reproducible
}
\section{has_tidy_media}{

Checks to make sure no audio/video files are found at the
root of your project.

\code{has_tidy_media("your project directory")}
}

\section{has_tidy_images}{

Checks to make sure no image files are found at the
root of your project.

\code{has_tidy_images("your project directory")}
}

\section{has_tidy_code}{

Checks to make sure no source files are found at the
root of your project.

\code{has_tidy_code("your project directory")}
}

\section{has_tidy_raw_data}{

Checks to make sure no raw data files are found at the
root of your project.

\code{has_tidy_raw_data("your project directory")}
}

\section{has_tidy_data}{

Checks to make sure no .rda files are found at the
root of your project.

\code{has_tidy_data("your project directory")}
}

\section{has_tidy_scripts}{

Checks to make sure no .R script files are found at the
root of your project.

\code{has_tidy_scripts("your project directory")}
}

\section{has_readme}{

Checks to make sure a README file is found at the
root of your project.

\code{has_readme("your project directory")}
}

\section{has_proj_root}{

Checks to make sure a single .Rproj file is found
at the root of your project.

\code{has_proj_root("your project directory")}
}

\section{has_no_nested_proj_root}{

Checks to make sure there are no nested .Rproj
files in your project.

\code{has_no_nested_proj_root("your project directory")}
}

\section{has_well_commented_code}{

Checks to make sure that all code files are at least 10 percent comments
\code{has_well_commented_code("your project directory")}
}

\section{has_only_used_files}{

Checks to make sure that all the files located
in your project directory are being used by/in
code from that directory.

\code{has_only_used_files("your project directory")}
}

\section{has_no_absolute_paths}{

Checks to make sure paths referenced in your
project code are all written as relative, rather
than absolute.

\code{has_no_absolute_paths("your project directory")}
}

\section{has_only_portable_paths}{

Checks to make sure all paths referenced
in your project code are located within the
project directory and are written as reltive,
rather than absolute.

\code{has_only_portable_paths("your project directory")}
}

\section{has_no_randomness}{

Checks to make sure that code in your project does
not use randomness. Your project will pass this check
if randomness is used but a seed is also set.

\code{has_no_randomness("your project directory")}
}

\section{has_no_lint}{

Checks whether your code conforms to tidyverse style.

\code{has_no_lint("your project directory")}
}

\section{has_clear_build_chain}{

Checks for a clear order in which to run your
R scripts.

\code{has_clear_build_chain("your project directory")}
}

\section{proj_check}{

Runs all individual checks together and provides a report
of which passed, which failed, why they failed, and suggestions
for how to work on them.

\code{proj_check("your project directory")}
}

\section{proj_check_some}{

Complete a specified selection of checks by harnessing
tidy evaluation.

\code{proj_check_some("your project directory", contains("tidy"), ends_with("root"), -has_tidy_raw_data)}
}

\section{proj_check_badge}{

Complete a set of fertile checks that correspond to a particular reproducibility badge

\code{proj_check_some("your project directory", "documentation")}
}

\section{list_checks}{

Print a list of the available checks
provided by fertile for reference purposes
}

